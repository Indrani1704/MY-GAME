<!DOCTYPE html>
<html>
<head>
  <title>Memory Game - <%= game.code %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Cinzel+Decorative:wght@700&display=swap" rel="stylesheet">

  <style>
    body {
      font-family: 'Cinzel Decorative', serif;
      text-align: center;
      background: radial-gradient(circle at center, #116530, #0b3d2e);
      color: white;
      min-height: 100vh;
    }

    h1, h3, p, span, button, li {
      font-family: 'Cinzel Decorative', serif;
    }

    h1 {
      font-size: 3rem;
      font-weight: bold;
      background: linear-gradient(45deg, #FFD700, #FFA500, #FF4500);
      background-clip: text;
      -webkit-background-clip: text;
      color: transparent;
      -webkit-text-fill-color: transparent;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.8);
    }

    #board {
      display: grid;
      grid-template-columns: repeat(6, 110px);
      gap: 15px;
      justify-content: center;
      margin-top: 20px;
    }

    .card-container {
      width: 110px;
      height: 150px;
      perspective: 1000px;
    }

    .card-inner {
      position: relative;
      width: 100%;
      height: 100%;
      transform-style: preserve-3d;
      transition: transform 0.6s;
      cursor: pointer;
    }

    .card-inner.flipped {
      transform: rotateY(180deg);
    }

    .card-front, .card-back {
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 10px;
      backface-visibility: hidden;
      box-shadow: 0 6px 12px rgba(0,0,0,0.4);
    }

    .card-back {
      background: #0d6efd;
    }

    .card-front {
      transform: rotateY(180deg);
    }

    .card-front img, .card-back img {
      width: 100%;
      height: 100%;
      border-radius: 10px;
      object-fit: cover;
    }

    #scoreboard {
      max-width: 320px;
      margin: 20px auto;
      background: #fff;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 10px rgba(0,0,0,0.5);
    }

    #scoreboard .list-group-item {
      font-weight: 600;
      font-family: 'Cinzel Decorative', serif;
    }

    #timer {
      font-size: 1.5rem;
      margin: 10px 0;
    }

    #quitBtn {
      margin-top: 10px;
      background: #dc3545;
      border: 1px solid #a71d2a;
      color: white;
    }

    #quitBtn:hover {
      transform: scale(1.05);
      box-shadow: 0 0 15px #ff6b6b, 0 0 25px #ff4c4c;
    }

    /* Winner popup */
    #winnerPopup {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(255, 215, 0, 0.95);
      color: black;
      font-size: 2rem;
      font-weight: bold;
      padding: 30px 50px;
      border-radius: 15px;
      display: none;
      z-index: 5000;
      text-align: center;
      box-shadow: 0 0 20px #FFD700, 0 0 40px #FFA500;
    }
  </style>
</head>
<body>
  <div class="container py-4">
    <h1>üÉÅ üÇ° üÇ± üÉë Memory Card Game</h1>
    <p>Game Code: <strong><%= game.code %></strong></p>
    <p>Status: <span id="status"><%= game.status %></span></p>
    <p id="timer">10:00</p>

    <% if(username === game.players[0].username && game.status === 'waiting') { %>
      <button id="startGame" class="btn btn-warning btn-lg shadow">Start Game</button>
    <% } %>
    <button id="quitBtn" class="btn">Quit Game</button>

    <div id="board"></div>

    <h3 class="mt-4">üèÜ Scoreboard</h3>
    <ul id="scoreboard" class="list-group list-group-flush text-dark">
      <% game.players.forEach(p => { %>
        <li class="list-group-item"><%= p.username %>: <%= p.score %></li>
      <% }) %>
    </ul>
  </div>

  <div id="winnerPopup"></div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
const socket = io();
const gameCode = "<%= game.code %>";
const username = "<%= username %>";
const board = document.getElementById("board");
const statusEl = document.getElementById("status");
const scoreboard = document.getElementById("scoreboard");
const startBtn = document.getElementById("startGame");
const timerEl = document.getElementById("timer");
const quitBtn = document.getElementById("quitBtn");
const winnerPopup = document.getElementById("winnerPopup");

socket.emit("joinGame", { code: gameCode, username });

let timerInterval;

// Function to show popup messages
function showPopup(message, duration = 5000) {
  winnerPopup.innerText = message;
  winnerPopup.style.background = message.includes("Winner") ? "rgba(255, 215, 0, 0.95)" : "rgba(220, 53, 69, 0.95)";
  winnerPopup.style.color = message.includes("Winner") ? "black" : "white";
  winnerPopup.style.display = "block";
  setTimeout(() => winnerPopup.style.display = "none", duration);
}

// Start game
startBtn?.addEventListener("click", () => {
  socket.emit("startGame", { code: gameCode });
  startBtn.disabled = true;
});

// Quit game
quitBtn.addEventListener("click", () => {
  socket.emit("quitGame", { code: gameCode, username });
  showPopup("You have left the game");
  setTimeout(() => window.location.href = "/", 1500); // redirect after popup
});

socket.on("gameState", (game) => {
  statusEl.innerText = game.status;

  if(game.status === "in-progress" && !timerInterval) {
    let timeLeft = 600; // 10 mins
    timerInterval = setInterval(() => {
      const min = Math.floor(timeLeft/60).toString().padStart(2,'0');
      const sec = (timeLeft%60).toString().padStart(2,'0');
      timerEl.innerText = `${min}:${sec}`;
      if(timeLeft <= 0) {
        clearInterval(timerInterval);
        socket.emit("endGame", { code: gameCode });
      }
      timeLeft--;
    }, 1000);
  }

  board.innerHTML = "";
  game.cards.forEach(card => {
    const container = document.createElement("div");
    container.classList.add("card-container");

    const inner = document.createElement("div");
    inner.classList.add("card-inner");
    if(card.flipped || card.matched) inner.classList.add("flipped");

    const back = document.createElement("div");
    back.classList.add("card-back");
    const backImg = document.createElement("img");
    backImg.src = "/cards/back.png";
    back.appendChild(backImg);

    const front = document.createElement("div");
    front.classList.add("card-front");
    const frontImg = document.createElement("img");
    frontImg.src = `/cards/${card.value}`;
    front.appendChild(frontImg);

    inner.appendChild(back);
    inner.appendChild(front);
    container.appendChild(inner);

    container.addEventListener("click", () => {
      if(!card.flipped && !card.matched && game.status === "in-progress") {
        socket.emit("flipCard", { code: gameCode, cardId: card.id, username });
      }
    });

    board.appendChild(container);
  });

  // Update scoreboard
  scoreboard.innerHTML = "";
  game.players.forEach(p => {
    const li = document.createElement("li");
    li.className = "list-group-item";
    li.innerText = `${p.username}: ${p.score}`;
    scoreboard.appendChild(li);
  });
});

socket.on("gameOver", ({ winner }) => {
  showPopup(`üéâ Winner: ${winner} üéâ`);
  clearInterval(timerInterval);
  statusEl.innerText = "ended";
});
</script>
</body>
</html>
